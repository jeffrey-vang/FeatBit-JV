var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useState, useEffect } from 'react';
import { defaultReactOptions } from './types';
import { Provider } from './context';
import getFlagsProxy from "./getFlagsProxy";
import { FbClientBuilder } from "@featbit/js-client-sdk";
import { fetchFlags } from "./utils";
/**
 * This is an async function which initializes feature-flags.co's JS SDK (`@featbit/js-client-sdk`)
 * and awaits it so all flags and the fbClient are ready before the consumer app is rendered.
 *
 * The difference between `withFbProvider` and `asyncWithFbProvider` is that `withFbProvider` initializes
 * `@featbit/js-client-sdk` at componentDidMount. This means your flags and the fbClient are only available after
 * your app has mounted. This can result in a flicker due to flag changes at startup time.
 *
 * `asyncWithFbProvider` initializes `@featbit/js-client-sdk` at the entry point of your app prior to render.
 * This means that your flags and the fbClient are ready at the beginning of your app. This ensures your app does not
 * flicker due to flag changes at startup time.
 *
 * `asyncWithFbProvider` accepts a config object which is used to initialize `@featbit/js-client-sdk`.
 *
 * `asyncWithFbProvider` does not support the `deferInitialization` config option because `asyncWithFbProvider` needs
 * to be initialized at the entry point prior to render to ensure your flags and the fbClient are ready at the beginning
 * of your app.
 *
 * It returns a provider which is a React FunctionComponent which:
 * - saves all flags and the ldClient instance in the context API
 * - subscribes to flag changes and propagate them through the context API
 *
 * @param config - The configuration used to initialize FeatBit's JS SDK
 */
export default function asyncWithFbProvider(config) {
    return __awaiter(this, void 0, void 0, function () {
        var options, userReactOptions, platform, reactOptions, error, fetchedFlags, fbClient, e_1, bootstrapFlags, FbProvider;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    options = config.options, userReactOptions = config.reactOptions, platform = config.platform;
                    reactOptions = __assign(__assign({}, defaultReactOptions), userReactOptions);
                    fetchedFlags = {};
                    fbClient = new FbClientBuilder(__assign({}, options))
                        .platform(platform)
                        .build();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, fbClient.waitForInitialization()];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, fetchFlags(fbClient)];
                case 3:
                    fetchedFlags = _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    e_1 = _a.sent();
                    error = e_1;
                    return [3 /*break*/, 5];
                case 5:
                    bootstrapFlags = ((options === null || options === void 0 ? void 0 : options.bootstrap) || []).reduce(function (acc, flag) {
                        acc[flag.id] = flag.variation;
                        return acc;
                    }, {});
                    FbProvider = function (_a) {
                        var children = _a.children;
                        var _b = useState(function () { return (__assign(__assign({ unproxiedFlags: fetchedFlags }, getFlagsProxy(fbClient, bootstrapFlags, fetchedFlags, reactOptions)), { fbClient: fbClient, error: error })); }), state = _b[0], setState = _b[1];
                        useEffect(function () {
                            function onReady() {
                                return __awaiter(this, void 0, void 0, function () {
                                    var unproxiedFlags;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, fetchFlags(fbClient)];
                                            case 1:
                                                unproxiedFlags = _a.sent();
                                                setState(function (prevState) { return (__assign(__assign(__assign({}, prevState), { unproxiedFlags: unproxiedFlags }), getFlagsProxy(fbClient, bootstrapFlags, unproxiedFlags, reactOptions))); });
                                                return [2 /*return*/];
                                        }
                                    });
                                });
                            }
                            function onFailed(e) {
                                setState(function (prevState) { return (__assign(__assign({}, prevState), { error: e })); });
                            }
                            function onUpdate(changedKeys) {
                                var _this = this;
                                var updates = changedKeys.reduce(function (acc, key) { return __awaiter(_this, void 0, void 0, function () {
                                    var _a, _b;
                                    return __generator(this, function (_c) {
                                        switch (_c.label) {
                                            case 0:
                                                _a = acc;
                                                _b = key;
                                                return [4 /*yield*/, fbClient.variation(key, '')];
                                            case 1:
                                                _a[_b] = _c.sent();
                                                return [2 /*return*/, acc];
                                        }
                                    });
                                }); }, {});
                                if (Object.keys(updates).length > 0) {
                                    setState(function (prevState) {
                                        var updatedUnproxiedFlags = __assign(__assign({}, prevState.unproxiedFlags), updates);
                                        return __assign(__assign(__assign({}, prevState), { unproxiedFlags: updatedUnproxiedFlags }), getFlagsProxy(fbClient, bootstrapFlags, updatedUnproxiedFlags, reactOptions));
                                    });
                                }
                            }
                            fbClient.on('update', onUpdate);
                            // Only subscribe to ready and failed if waitForInitialization timed out
                            // because we want the introduction of init timeout to be as minimal and backwards
                            // compatible as possible.
                            if (error === null || error === void 0 ? void 0 : error.name.toLowerCase().includes('timeout')) {
                                fbClient.on('failed', onFailed);
                                fbClient.on('ready', onReady);
                            }
                            return function cleanup() {
                                fbClient.off('update', onUpdate);
                                fbClient.off('failed', onFailed);
                                fbClient.off('ready', onReady);
                            };
                        }, []);
                        var _ = state.unproxiedFlags, rest = __rest(state, ["unproxiedFlags"]);
                        return React.createElement(Provider, { value: rest }, children);
                    };
                    return [2 /*return*/, FbProvider];
            }
        });
    });
}
//# sourceMappingURL=asyncWithFbProvider.js.map