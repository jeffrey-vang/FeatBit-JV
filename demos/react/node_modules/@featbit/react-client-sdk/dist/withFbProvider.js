var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { defaultReactOptions } from './types';
import FbProvider from './provider';
import hoistNonReactStatics from 'hoist-non-react-statics';
/**
 * `withFbProvider` is a function which accepts a config object which is used to
 * initialize `@featbit/js-client-sdk`.
 *
 * This HOC handles passing configuration to the `FbProvider`, which does the following:
 * - It initializes the fbClient instance by calling `@featbit/js-client-sdk` init on `componentDidMount`
 * - It saves all flags and the fbClient instance in the context API
 * - It subscribes to flag changes and propagate them through the context API
 *
 * The difference between `withFbProvider` and `asyncWithFbProvider` is that `withFbProvider` initializes
 * `@featbit/js-client-sdk` at `componentDidMount`. This means your flags and the fbClient are only available after
 * your app has mounted. This can result in a flicker due to flag changes at startup time.
 *
 * `asyncWithFbProvider` initializes `@featbit/js-client-sdk` at the entry point of your app prior to render.
 * This means that your flags and the fbClient are ready at the beginning of your app. This ensures your app does not
 * flicker due to flag changes at startup time.
 *
 * @param config - The configuration used to initialize FeatBit JS Client SDK
 * @return A function which accepts your root React component and returns a HOC
 */
export function withFbProvider(config) {
    return function withFbProviderHoc(WrappedComponent) {
        var userReactOptions = config.reactOptions;
        var reactOptions = __assign(__assign({}, defaultReactOptions), userReactOptions);
        var providerProps = __assign(__assign({}, config), { reactOptions: reactOptions });
        function HoistedComponent(props) {
            return (React.createElement(FbProvider, __assign({}, providerProps),
                React.createElement(WrappedComponent, __assign({}, props))));
        }
        hoistNonReactStatics(HoistedComponent, WrappedComponent);
        return HoistedComponent;
    };
}
export default withFbProvider;
//# sourceMappingURL=withFbProvider.js.map